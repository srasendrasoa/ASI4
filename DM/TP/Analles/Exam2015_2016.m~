clear all;
close all;

%% Question 1

load('datatest.mat');
load('datatrain.mat');

[valpropre,U,moy] = mypca(Xa);
P = U(:,1:100);
X_C = projpca(Xa,moy,P);

%%
Xapp = X_C;
Yapp = Ya;

Yapp(Yapp==3) = -1;
Yapp(Yapp==8) = 1;

[Xapp,Yapp,Xtemp,Ytemp]=splitdata(Xapp,Yapp,0.8);
[Xtest,Ytest,Xval,Yval]=splitdata(Xtemp,Ytemp,0.5);

[Xapp,Xval,meanapp,stdxapp]=normalizemeanstd(Xapp,Xval);
[Xtest]=normalizemeanstd(Xtest,[],meanapp,stdxapp);


%%
C = [0.0001
    0.001
    0.01
    0.1
    9
    9.1
    9.2
    9.3
    9.4
    9.5
    9.6
    9.7
    9.8
    9.9
    10
    100
    1000
    10000];
erreur_val=zeros(size(C,1),1);
erreur_app=zeros(size(C,1),1);

for i=1:size(C,1)
    [w,b,alpha]=monsvmclass(Xapp,Yapp,C(i));

    % Erreur validation
    ypred_val=monsvmval(Xval,w,b);
    ypred_val(ypred_val>0)=1;
    ypred_val(ypred_val<0)=-1;
    erreur = mean(Yval~=ypred_val);
    erreur_val(i)=erreur;
    
    % Erreur apprentissage
    ypred_app=monsvmval(Xapp,w,b);
    ypred_app(ypred_app>0)=1;
    ypred_app(ypred_app<0)=-1;
    erreur = mean(Yapp~=ypred_app);
    erreur_app(i)=erreur;
    
end
figure(2)
hold on
plot(erreur_val,'r--*');
plot(erreur_app,'b--+');
legend('erreurVal','erreurAPP')
hold off

%% Entrainement du modèle avec le bon C
%Fusion de l'ensemble d'apprentissage et de validation
Xapp=[Xapp
    Xval];
Yapp=[Yapp
    Yval];

% Entraînement du modèle
% Selection du bon C
C=C(find(erreur_val==min(erreur_val)));
[w,b,alpha]=monsvmclass(Xapp,Yapp,C(end));

% Calcul de l'erreur
ypred=monsvmval(Xtest,w,b);
ypred(ypred>0)=1;
ypred(ypred<0)=-1;
erreur = mean(Ytest~=ypred);

TP = length(Ytest(Ytest(find(ypred==Ytest))==1));
TN = length(Ytest(Ytest(find(ypred==Ytest))==-1));

FP = length(Ytest(Ytest(find(ypred==-1))==1));
FN = length(Ytest(Ytest(find(ypred==1))==-1));

confusion_matrix=[TP FP
    FN TN]
fpr = FP/(FP+TN)
tpr = TP/(TP+FN)

%% Test sur modèle 

[w,b,alpha]=monsvmclass(Xt,Yt,C(end));

% Calcul de l'erreur
ypred=monsvmval(Xt,w,b);
ypred(ypred>0)=1;
ypred(ypred<0)=-1;
erreur = mean(Yt~=ypred);

TP = length(Yt(Yt(find(ypred==Yt))==1));
TN = length(Ytest(Ytest(find(ypred==Yt))==-1));

FP = length(Ytest(Ytest(find(ypred==-1))==1));
FN = length(Ytest(Ytest(find(ypred==1))==-1));

confusion_matrix=[TP FP
    FN TN]
fpr = FP/(FP+TN)
tpr = TP/(TP+FN)
